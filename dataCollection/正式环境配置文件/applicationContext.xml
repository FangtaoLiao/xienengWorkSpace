<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">
	
	
	<!-- 注入顺序 -->
	<!-- jdbc.properties->dataSource->sqlSessionFactory->mapper(dao)->service->controller(action) -->


	<!-- 扫描父包 使用<context:component-scan/>后，即可将<context:annotation-config/>省去。 -->
	 <!-- 扫描指定package下所有带有如@controller,@services,@resource,@ods并把所注释的注册为Spring Beans ,com.synpowertech.dataCollectionJar.initialization--> 
	<context:component-scan base-package="com.synpowertech.dataCollectionJar" />

	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />
	
	<!-- 配置c3p0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="100" />
		<!-- 连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="1" />
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="10" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="30" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="5" />
		<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 -->
		<!-- 如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="0" />
		<!-- 每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 -->
		<!-- 获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="true" />
		<!-- 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable -->
		<!-- 等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
		<!-- 解决事务自动提交问题 -->
		<property name="connectionCustomizerClassName"
			value="com.synpowertech.dataCollectionJar.utils.ConnectionCustomizer4AutoCommit" />
	</bean>

	<!-- 事务配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--引入数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载所有的mapper路径 -->
		<property name="mapperLocations"
			value="classpath:com/synpowertech/dataCollectionJar/dao/*Mapper.xml" />
		<!--配置别名 -->
		<property name="typeAliasesPackage" value="com.synpowertech.dataCollectionJar.domain" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描mapper接口的包路径 -->
		<property name="basePackage" value="com.synpowertech.dataCollectionJar.dao" />
	</bean>

	<!-- 事务管理器 只依赖于数据源 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 注解声明式事务管理 -->
	<tx:annotation-driven />
	
	<!-- 初始化缓存 -->
	<bean class="com.synpowertech.dataCollectionJar.initialization.DeviceCache" init-method="initMethod"></bean>
	
	<!-- 初始化线程池,避免首次接收消息，被多次初始化 -->
	<bean class="com.synpowertech.dataCollectionJar.utils.ThreadPool" init-method="initImportPool"></bean>
	
	<!-- 初始化工具类 -->
	<bean class="com.synpowertech.dataCollectionJar.utils.XmlParseUtil"></bean>
	<bean class="com.synpowertech.dataCollectionJar.utils.JsonParseUtil"></bean>
	
	<!-- 初始化遥测定时存库，注入服务 ,或者使用注解，无参的构造方法注入静态变量，spring启动时创建实例注入-->
	<bean class="com.synpowertech.dataCollectionJar.timedTask.DataSaveTask"></bean>
	<bean class="com.synpowertech.dataCollectionJar.timedTask.SyncTimeTask"></bean>
	<bean class="com.synpowertech.dataCollectionJar.timedTask.JudgeConnStatusTask"></bean>
	
	<!-- 初始化要读取的常量 -->
	<bean class="com.synpowertech.dataCollectionJar.initialization.SynConstant" ></bean>
	
	<!-- 初始化redis连接 -->
	<import resource="spring-redis.xml"/>
	
	<!-- 初始化rabbitMq连接 -->
	<!--<import resource="spring-rabbitMq.xml"/>-->
<!-- 	<import resource="spring-rabbitMq(direct).xml"/> -->
<!-- 	<import resource="spring-rabbitMq(topic).xml"/> -->
	
	<!-- 初始化rmi服务发布 -->
	<import resource="spring-rmi.xml"/>
	
	<!-- 初始化Mqtt服务 -->
 	<import resource="spring-mqtt.xml"/>
 	
	<!-- 集成quartz定时任务 -->
 	<import resource="spring-quartz.xml"/>
	

</beans>
